{"version":3,"file":"static/js/391.2ea0e09e.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/App.styled.jsx","pages/ContactPage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getIsRefreshing = state => state.contacts.isRefreshing;\n\nexport const contactsSelectors = {\n  getContacts,\n  getFilter,\n  getIsLoading,\n  getIsRefreshing\n};","import { useState } from \"react\";\n// import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport {contactsSelectors} from 'redux/contacts/contacts-selectors'\n\nimport { Button, Container, Label, FormInput} from \"./ContactForm.styled\";\n\nexport function ContactForm() {\n    const [ name, setName ] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const dispatch = useDispatch();\n   \n    // const nameInputId = nanoid();\n    // const phoneInputId = nanoid();\n  \n   const onChangeName = e => setName(e.currentTarget.value);\n  const onChangeNumber = e => setNumber(e.currentTarget.value);\n\n    const handleSubmit= e => {\n        e.preventDefault();\n        \n         const newContact = { name, number };\n      if (\n         contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n      ) {\n         return (`Контакт с именем ${name} уже существует`);\n      }\n      dispatch(addContact(newContact));\n      setName('');\n      setNumber('');\n   };\n\n    // const setContact = value => {\n    //     if (contacts.every(({ name }) =>\n    //         name.toLowerCase() !== value.name.toLowerCase())) {\n    //         dispatch(contactOperations.addContact(value))\n    //     } else {\n    //         alert(`${value.name} is already in contacts`);\n    //     }\n    // };\n    \n    return (\n            <form onSubmit={handleSubmit}>\n                <Container>\n                <Label >Name\n                    <FormInput\n                        type=\"text\"\n                        name=\"name\"\n                       \n                        value={name}\n                        onChange={onChangeName}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </Label>\n                <Label >Number\n                    <FormInput\n                        type=\"tel\"\n                        name=\"number\"\n                        value={number}\n                        onChange={onChangeNumber}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    />\n                </Label>\n                <Button type=\"submit\"> Add Contact </Button>     \n            </Container>\n            </form>\n        );\n}; \n\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\nlist-style: none;\nmargin: 0, auto;\npadding: 0;\n`\nexport const ListItem = styled.li`\ndisplay: flex;\nalign-items: center;\nmargin-bottom: 15px;\n`\n\nexport const Button = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #457aab;\n    border: none;\n    border-radius:8px;\n    color: white;\n    cursor: pointer;\n    height: 30px;\n    width: 60px;\n    margin:0 auto;\n`\nexport const Text = styled.p`\nfont-weight: 500;\nmargin-right:15px;\n`\nexport const SubText = styled.span`\ncolor:orange;\n\nmargin-right:15px;\nfont-weight: 500;\n`","import { ListItem,SubText, Text, Button} from \"components/ContactList/ContactList.styled\"\nimport { useDispatch} from 'react-redux';\nimport {  removeContact} from 'redux/contacts/contacts-operation'\n\nexport const ContactListItem = ({ name, number, id}) => { \n    const dispatch = useDispatch();\n   \n    return(<ListItem >\n                <SubText>{name}:</SubText>\n                <Text>{number}</Text>\n        <Button\n            type='button'\n            onClick={() => dispatch(removeContact(id))}>Удалить\n        </Button>  \n            </ListItem>)\n}","import { useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts/contacts-selectors';\nimport { fetchContacts } from 'redux/contacts/contacts-operation';\nimport { List} from \"./ContactList.styled\";\nimport { ContactListItem } from \"components/ContactItem/ContactItem\";\n\n\nexport const ContactList = () => {\nconst dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts =  ()=>{\n      const normalizedFilter = filter.toLowerCase();\n      \n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n }\n    const filteredContactsList = filteredContacts();\n    \n    return (\n        contacts && (\n            < List >\n                {filteredContactsList.map(({ id, name, number }) => {\n                    return (<ContactListItem\n                        key={id}\n                        id={id}\n                        name={name}\n                        number={number}\n                    />)\n                })}\n            </List>\n        ));\n};\n\nContactList.proptype = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n  ),\n};\n  \n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\nborder-radius:8px;\n      border: 1px solid orange;\n    color: black;\n    font-size: 14px;\n    height: 40px;\n    outline: none;\n    padding: 0 10px;\n    min-width: 300px;\n`\n\nexport const Label = styled.label`\ndisplay: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n`;","import { useDispatch } from 'react-redux'\nimport {contactSlice} from 'redux/contacts/contacts-slice';\nimport {Input,Label} from \"./Filter.styled\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    \n    const handleChangeFilter = e => {\n    dispatch(contactSlice.actions.filteredContact(e.currentTarget.value))\n    };\n\n    return (<Label>Find contacts by name\n        <Input\n            type=\"text\"\n            name='filter'\n            onChange={handleChangeFilter}\n        />\n    </Label>);\n};\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0 15px;\n   \n`\nexport const Box = styled.div`\n   display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n`","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\"; \nimport { Container, Box } from \"components/App.styled\";\n\nexport default function ContactPage() {\n \n   return (\n      <Container>\n      <h2>Phonebook</h2>\n      <ContactForm />\n    \n      <h3>Contacts</h3>\n      <Box>\n        <Filter />\n        <ContactList/>\n      </Box>\n    </Container>\n   );\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["contactsSelectors","state","contacts","filter","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","newContact","some","contact","toLowerCase","addContact","type","value","onChange","currentTarget","pattern","title","required","List","styled","ListItem","Button","Text","SubText","ContactListItem","id","onClick","removeContact","ContactList","useEffect","fetchContacts","filteredContactsList","normalizedFilter","includes","filteredContacts","map","proptype","PropTypes","Input","Label","Filter","contactSlice","Container","Box","ContactPage","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}