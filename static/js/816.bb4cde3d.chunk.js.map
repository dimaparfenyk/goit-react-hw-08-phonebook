{"version":3,"file":"static/js/816.bb4cde3d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/App.styled.jsx","pages/HomePage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Label = styled.label`\ndisplay: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n`;\n\nexport const Container = styled.div`\n    margin: 0 auto;\n    padding: 0 10px 80px;\n    width: 320px;\n`\n\nexport const FormInput = styled.input`\n\n    font-size: 16px;\n    height: 36px;\n    outline: none;\n    padding: 0 12px;\n    border: 1px solid orange;\n    border-radius:8px;\n    color: teal;\n`\n\nexport const Button = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #457aab;\n    border: none;\n    border-radius:8px;\n    color: white;\n    cursor: pointer;\n    height: 40px;\n    width: 200px;\n`","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from \"react\";\nimport { useGetContactsQuery, useAddContactMutation } from \"components/redux/features/contactSlice\";\nimport { nanoid } from 'nanoid';\n\nimport { Button, Container, Label, FormInput} from \"./ContactForm.styled\";\n\nexport function ContactForm() {\n    const [ name, setName ] = useState('');\n    const [phone, setPhone] = useState('');\n    const { data: contacts } = useGetContactsQuery();\n    const [addContact] = useAddContactMutation();\n   \n    const nameInputId = nanoid();\n    const phoneInputId = nanoid();\n  \n   const handleChange = e => {\n        const { name, value } = e.currentTarget;\n    \n       switch (name) {\n           case 'name':\n               setName(value)\n               break;\n           \n           case 'phone':\n               setPhone(value)\n               break; \n           \n           default:\n               return;\n       }\n    };\n\n    const  handleSubmit = e => {\n        e.preventDefault();\n        \n        setContact({\n            id: nanoid(),\n            name,\n            phone,\n        });\n        setName('');\n        setPhone('');\n    };\n\n    const setContact = value => {\n        if (contacts.every(({ name }) =>\n            name.toLowerCase() !== value.name.toLowerCase())) {\n            addContact(value);\n        } else {\n            alert(`${value.name} is already in contacts`);\n        }\n    };\n    \n    return (\n            <form onSubmit={handleSubmit}>\n                <Container>\n                <Label htmlFor={nameInputId}>Name\n                    <FormInput\n                        type=\"text\"\n                        name=\"name\"\n                        id={nameInputId}\n                        value={name}\n                        onChange={handleChange}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </Label>\n                <Label htmlFor={phoneInputId}>Number\n                    <FormInput\n                        type=\"tel\"\n                        name=\"phone\"\n                        id={phoneInputId}\n                        value={phone}\n                        onChange={handleChange}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    />\n                </Label>\n                <Button type=\"submit\"> Add Contact </Button>     \n            </Container>\n            </form>\n        );\n}; \n\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\nlist-style: none;\nmargin: 0, auto;\npadding: 0;\n`\nexport const ListItem = styled.li`\ndisplay: flex;\nalign-items: center;\nmargin-bottom: 15px;\n`\n\nexport const Button = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #457aab;\n    border: none;\n    border-radius:8px;\n    color: white;\n    cursor: pointer;\n    height: 30px;\n    width: 60px;\n    margin:0 auto;\n`\nexport const Text = styled.p`\nfont-weight: 500;\nmargin-right:15px;\n`\nexport const SubText = styled.span`\ncolor:orange;\n\nmargin-right:15px;\nfont-weight: 500;\n`","import { ListItem,SubText, Text, Button} from \"components/ContactList/ContactList.styled\"\nimport { useDeleteContactMutation } from \"components/redux/features/contactSlice\"\n\nexport const ContactListItem = ({ name, phone,id, isLoading}) => { \n    const [deleteContact, result] = useDeleteContactMutation();\n   console.log(result)\n    return(<ListItem >\n                <SubText>{name}:</SubText>\n                <Text>{phone}</Text>\n        <Button\n            type='button'\n            onClick={() => deleteContact(id)}>Удалить\n        </Button>  \n            </ListItem>)\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { useSelector} from 'react-redux';\nimport { useGetContactsQuery } from \"components/redux/features/contactSlice\";\nimport { List} from \"./ContactList.styled\";\nimport { ContactListItem } from \"components/ContactItem/ContactItem\";\n\nexport const ContactList = () => {\n    const filter = useSelector(state => state.filter.value);\n    const { data} = useGetContactsQuery()\n\n    const filteredItems = filter\n        ? data.filter(({ name }) => name.toLowerCase().includes(filter))\n        : data;\n    \n    return (<List>\n        {data && filteredItems.map(({ name, phone, id}) =>\n            <ContactListItem\n                key={id}\n                id={id}\n                name={name}\n                phone={phone}\n                />   \n        )}\n    </List>)\n};\n\nContactList.proptype = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }),\n  ),\n};\n  \n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\nborder-radius:8px;\n      border: 1px solid orange;\n    color: black;\n    font-size: 14px;\n    height: 40px;\n    outline: none;\n    padding: 0 10px;\n    min-width: 300px;\n`\n\nexport const Label = styled.label`\ndisplay: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n`;","import { useSelector, useDispatch } from 'react-redux'\nimport {Input,Label} from \"./Filter.styled\";\nimport { setFilter } from \"components/redux/features/filterSlice\";\n\nexport const Filter = () => {\n   const value = useSelector(state => state.filter.value);\n    const dispatch = useDispatch();\n    \n    const handleChangeFilter = e => {\n    dispatch(setFilter(e.target.value))\n    };\n\n    return (<Label>Find contacts by name\n        <Input\n            type=\"text\"\n            name='filter'\n            value={value}\n            onChange={handleChangeFilter}\n        />\n    </Label>);\n};\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0 15px;\n   \n`\nexport const Box = styled.div`\n   display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n`","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\"; \nimport { Container, Box } from \"components/App.styled\";\n\nexport default function HomePage() {\n\n   return (\n       <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n    \n      <h2>Contacts</h2>\n      <Box>\n      <Filter/>\n      <ContactList/>\n      </Box>\n    </Container>\n   );\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["Label","styled","Container","FormInput","Button","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","phone","setPhone","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","nameInputId","phoneInputId","handleChange","e","currentTarget","value","setContact","every","toLowerCase","alert","onSubmit","preventDefault","htmlFor","type","onChange","pattern","title","required","List","ListItem","Text","SubText","ContactListItem","isLoading","useDeleteContactMutation","deleteContact","result","console","log","onClick","ContactList","filter","useSelector","state","filteredItems","includes","map","proptype","PropTypes","number","Input","Filter","dispatch","useDispatch","setFilter","target","Box","HomePage","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}